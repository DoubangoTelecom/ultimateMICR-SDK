# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ultimateMicrSdk', [dirname(__file__)])
        except ImportError:
            import _ultimateMicrSdk
            return _ultimateMicrSdk
        if fp is not None:
            try:
                _mod = imp.load_module('_ultimateMicrSdk', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ultimateMicrSdk = swig_import_helper()
    del swig_import_helper
else:
    import _ultimateMicrSdk
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


ULTMICR_SDK_VERSION_MAJOR = _ultimateMicrSdk.ULTMICR_SDK_VERSION_MAJOR
ULTMICR_SDK_VERSION_MINOR = _ultimateMicrSdk.ULTMICR_SDK_VERSION_MINOR
ULTMICR_SDK_VERSION_MICRO = _ultimateMicrSdk.ULTMICR_SDK_VERSION_MICRO
ULTMICR_SDK_IMAGE_TYPE_RGB24 = _ultimateMicrSdk.ULTMICR_SDK_IMAGE_TYPE_RGB24
ULTMICR_SDK_IMAGE_TYPE_RGBA32 = _ultimateMicrSdk.ULTMICR_SDK_IMAGE_TYPE_RGBA32
ULTMICR_SDK_IMAGE_TYPE_BGRA32 = _ultimateMicrSdk.ULTMICR_SDK_IMAGE_TYPE_BGRA32
ULTMICR_SDK_IMAGE_TYPE_NV12 = _ultimateMicrSdk.ULTMICR_SDK_IMAGE_TYPE_NV12
ULTMICR_SDK_IMAGE_TYPE_NV21 = _ultimateMicrSdk.ULTMICR_SDK_IMAGE_TYPE_NV21
ULTMICR_SDK_IMAGE_TYPE_YUV420P = _ultimateMicrSdk.ULTMICR_SDK_IMAGE_TYPE_YUV420P
ULTMICR_SDK_IMAGE_TYPE_YVU420P = _ultimateMicrSdk.ULTMICR_SDK_IMAGE_TYPE_YVU420P
ULTMICR_SDK_IMAGE_TYPE_YUV422P = _ultimateMicrSdk.ULTMICR_SDK_IMAGE_TYPE_YUV422P
ULTMICR_SDK_IMAGE_TYPE_YUV444P = _ultimateMicrSdk.ULTMICR_SDK_IMAGE_TYPE_YUV444P
ULTMICR_SDK_IMAGE_TYPE_Y = _ultimateMicrSdk.ULTMICR_SDK_IMAGE_TYPE_Y
class UltMicrSdkResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UltMicrSdkResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UltMicrSdkResult, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ultimateMicrSdk.new_UltMicrSdkResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ultimateMicrSdk.delete_UltMicrSdkResult
    __del__ = lambda self : None;
    def code(self): return _ultimateMicrSdk.UltMicrSdkResult_code(self)
    def phrase(self): return _ultimateMicrSdk.UltMicrSdkResult_phrase(self)
    def json(self): return _ultimateMicrSdk.UltMicrSdkResult_json(self)
    def numZones(self): return _ultimateMicrSdk.UltMicrSdkResult_numZones(self)
    def isOK(self): return _ultimateMicrSdk.UltMicrSdkResult_isOK(self)
UltMicrSdkResult_swigregister = _ultimateMicrSdk.UltMicrSdkResult_swigregister
UltMicrSdkResult_swigregister(UltMicrSdkResult)

class UltMicrSdkEngine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UltMicrSdkEngine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UltMicrSdkEngine, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["init"] = lambda x: _ultimateMicrSdk.UltMicrSdkEngine_init
    if _newclass:init = staticmethod(_ultimateMicrSdk.UltMicrSdkEngine_init)
    __swig_getmethods__["deInit"] = lambda x: _ultimateMicrSdk.UltMicrSdkEngine_deInit
    if _newclass:deInit = staticmethod(_ultimateMicrSdk.UltMicrSdkEngine_deInit)
    __swig_getmethods__["process"] = lambda x: _ultimateMicrSdk.UltMicrSdkEngine_process
    if _newclass:process = staticmethod(_ultimateMicrSdk.UltMicrSdkEngine_process)
    __swig_getmethods__["requestRuntimeLicenseKey"] = lambda x: _ultimateMicrSdk.UltMicrSdkEngine_requestRuntimeLicenseKey
    if _newclass:requestRuntimeLicenseKey = staticmethod(_ultimateMicrSdk.UltMicrSdkEngine_requestRuntimeLicenseKey)
    __swig_getmethods__["warmUp"] = lambda x: _ultimateMicrSdk.UltMicrSdkEngine_warmUp
    if _newclass:warmUp = staticmethod(_ultimateMicrSdk.UltMicrSdkEngine_warmUp)
    __swig_destroy__ = _ultimateMicrSdk.delete_UltMicrSdkEngine
    __del__ = lambda self : None;
UltMicrSdkEngine_swigregister = _ultimateMicrSdk.UltMicrSdkEngine_swigregister
UltMicrSdkEngine_swigregister(UltMicrSdkEngine)

def UltMicrSdkEngine_init(*args):
  return _ultimateMicrSdk.UltMicrSdkEngine_init(*args)
UltMicrSdkEngine_init = _ultimateMicrSdk.UltMicrSdkEngine_init

def UltMicrSdkEngine_deInit():
  return _ultimateMicrSdk.UltMicrSdkEngine_deInit()
UltMicrSdkEngine_deInit = _ultimateMicrSdk.UltMicrSdkEngine_deInit

def UltMicrSdkEngine_process(*args):
  return _ultimateMicrSdk.UltMicrSdkEngine_process(*args)
UltMicrSdkEngine_process = _ultimateMicrSdk.UltMicrSdkEngine_process

def UltMicrSdkEngine_requestRuntimeLicenseKey(rawInsteadOfJSON=False):
  return _ultimateMicrSdk.UltMicrSdkEngine_requestRuntimeLicenseKey(rawInsteadOfJSON)
UltMicrSdkEngine_requestRuntimeLicenseKey = _ultimateMicrSdk.UltMicrSdkEngine_requestRuntimeLicenseKey

def UltMicrSdkEngine_warmUp(*args):
  return _ultimateMicrSdk.UltMicrSdkEngine_warmUp(*args)
UltMicrSdkEngine_warmUp = _ultimateMicrSdk.UltMicrSdkEngine_warmUp

# This file is compatible with both classic and new-style classes.


